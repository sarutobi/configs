"------------------
" Main settings
"------------------
set nocompatible
set history=500 " длина истории команд
set undolevels=100 " память отмен
set ttyfast " ???

set nobackup
set nowritebackup
set noswapfile

filetype off

"Pathogen
execute pathogen#infect()
"Vundle
call vundle#rc()

"-----------------
" Bundles
"----------------- 
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/syntastic'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'majutsushi/tagbar'
Bundle 'tpope/vim-fugitive'
Bundle 'itchyny/lightline.vim'
Bundle 'gmarik/vundle'
Bundle 'Valloric/YouCompleteMe'
Bundle 'nvie/vim-flake8'
Bundle 'flazz/vim-colorschemes'
Bundle 'w0ng/vim-hybrid'
Bundle 'klen/python-mode'
Bundle 'tpope/vim-surround'
Bundle 'fisadev/FixedTaskList.vim'
Bundle 'fisadev/fisa-vim-colorscheme'
Bundle 'rosenfeld/conque-term'
Bundle 'Townk/vim-autoclose'
Bundle 'altercation/vim-colors-solarized.git'
" Snippets manager (SnipMate), dependencies, and snippets repo
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'honza/vim-snippets'
Bundle 'Sirver/ultisnips'
Bundle 'fisadev/vim-isort'
Bundle 'matchit.zip'
Bundle 'YankRing.vim'

filetype on
filetype plugin indent on

"Color setup
syntax on
" if has('gui_running')
    " set background=dark
    " colorscheme solarized
" else
    set background=dark
    colorscheme wombat256
" endif
highlight Pmenu ctermbg=7 ctermfg=0 guibg=blue
highlight PmenuSel ctermbg=4 ctermfg=7 guibg=blue guifg=white

"Allow delete characters by backspace in insert mode
set backspace=2

"Footer setup
set laststatus=2
set cmdheight=1

"Tab options
set autoindent
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

"Fold defaults
"set foldcolumn=3
set foldmethod=syntax
set foldlevel=99
"set foldmethod=indent
"Useful hints
set showmatch " показывать парные скобки
set ignorecase " в общем случае, поиск без учета регистра
set smartcase " но если есть большие символы - то с учетом регистра
set hlsearch " подсвечивать все найденные куски
set incsearch " искать по мере набора
set nowrap " не рвать строки
set listchars+=precedes:<,extends:> " показывать, когда строка выходит за края экрана
set sidescroll=5
set sidescrolloff=5
set scrolloff=2
set hidden
set autowrite
" set tags+=~/.vim/systags
set mouse=a " с поддержкой мыши
set mousemodel=popup


" NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']

" NERDCommenter
let NERDCommentWholeLinesInVMode=1
let NERDRemoveAltComs=1
let NERDSpaceDelims=1
let NERDRemoveExtraSpaces=1
let NERDMapleader='.c'


" MiniBufExplorer
let g:miniBufExplAutoStart=0
let g:miniBufExplTabWrap=1
let g:miniBufExplMaxSize=1
let loaded_bufexplorer=1
"let g:bufExplorerDefaultHelp=1
"let g:bufExplorerDetailedHelp=1
"let g:bufExplorerShowDirectories=0
"let g:bufExplorerUseCurrentWindow=0
"let g:bufExplorerSplitBelow=1
"let g:bufExplorerSplitRight=1
"let g:bufExplorerSplitVertical=0
"let g:bufExplorerUseCurrentWindow=1
" autocmd CursormovedI * if pumvisible == 0|pclose|endif
" autocmd InsertLeave * if pumvisible == 0|pclose|endif
" Fix to let ESC work as espected with Autoclose plugin
let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}

" Tagbar
let g:tagbar_autofocus=1
let g:tagbar_sort=1

" LightLine
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
        \ 'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
        \ 'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
    \ 'component_function': {
        \ 'fugitive': 'MyFugitive',
        \ 'filename': 'MyFilename',
        \ 'fileformat': 'MyFileformat',
        \ 'filetype': 'MyFiletype',
        \ 'fileencoding': 'MyFileencoding',
        \ 'mode': 'MyMode',
        \ 'ctrlpmark': 'CtrlPMark',
        \ },
    \ 'component_expand': {
	\   'syntastic': 'SyntasticStatuslineFlag',
	\ },
    \ 'component_type': {
	\   'syntastic': 'error',
	\ },
    \ 'subseparator': { 'left': '|', 'right': '|' }
	\ }
	
    function! MyModified()
      return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction
	
    function! MyReadonly()
      return &ft !~? 'help' && &readonly ? 'RO' : ''
    endfunction
	
    function! MyFilename()
      let fname = expand('%:t')
      return fname == 'ControlP' ? g:lightline.ctrlp_item :
            \ fname == '__Tagbar__' ? g:lightline.fname :
            \ fname =~ '__Gundo\|NERD_tree' ? '' :
            \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
            \ &ft == 'unite' ? unite#get_status_string() :
            \ &ft == 'vimshell' ? vimshell#get_status_string() :
            \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
            \ ('' != fname ? fname : '[No Name]') .
            \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction
	
    function! MyFugitive()
      try
        if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
          let mark = ''  " edit here for cool mark
          let _ = fugitive#head()
          return strlen(_) ? mark._ : ''
        endif
      catch
      endtry
      return ''
    endfunction
	
    function! MyFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction
    
    function! MyFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction
	
    function! MyFileencoding()
      return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction
    
    function! MyMode()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? 'Tagbar' :
            \ fname == 'ControlP' ? 'CtrlP' :
            \ fname == '__Gundo__' ? 'Gundo' :
            \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
            \ fname =~ 'NERD_tree' ? 'NERDTree' :
            \ &ft == 'unite' ? 'Unite' :
            \ &ft == 'vimfiler' ? 'VimFiler' :
            \ &ft == 'vimshell' ? 'VimShell' :
            \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
    
    function! CtrlPMark()
      if expand('%:t') =~ 'ControlP'
        call lightline#link('iR'[g:lightline.ctrlp_regex])
        return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
              \ , g:lightline.ctrlp_next], 0)
      else
        return ''
      endif
    endfunction
    
    let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2',
      \ }
    
    function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
      let g:lightline.ctrlp_regex = a:regex
      let g:lightline.ctrlp_prev = a:prev
      let g:lightline.ctrlp_item = a:item
      let g:lightline.ctrlp_next = a:next
      return lightline#statusline(0)
    endfunction
    
    function! CtrlPStatusFunc_2(str)
      return lightline#statusline(0)
    endfunction
    
	let g:tagbar_status_func = 'TagbarStatusFunc'
	
	function! TagbarStatusFunc(current, sort, fname, ...) abort
	    let g:lightline.fname = a:fname
	  return lightline#statusline(0)
	endfunction
	
	augroup AutoSyntastic
	  autocmd!
	  autocmd BufWritePost *.c,*.cpp call s:syntastic()
	augroup END
	function! s:syntastic()
	  SyntasticCheck
	  call lightline#update()
	endfunction
	
	let g:unite_force_overwrite_statusline = 0
	let g:vimfiler_force_overwrite_statusline = 0
	let g:vimshell_force_overwrite_statusline = 0

" python-mode settings
let g:pymode_lint_on_write=0
let g:pymode_lint_ignore=""
let g:pymode_rope = 0
" Snipmate remappings
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger
" UltiSnips mappings
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"

"------------------
"Useful keymaps
"------------------
let mapleader = "\\"
noremap <F2> :NERDTreeToggle<cr>
noremap <F3> :MBEToggle<cr>
noremap <F4> :Tagbar<cr>
noremap <silent><F11> <esc>:Gcommit<cr>
noremap <silent><F10> <esc>:Gstatus<cr>

"let g:NERDUncomLineMap='<leader>C'


" выход из редактора
nmap <silent> <leader>q :qa<CR>


noremap <silent> <leader>mb :MarksBrowser<CR>

nnoremap <silent> <leader>W :set<Space>nowrap!<CR>
nnoremap <silent> <leader>n :set<Space>nu!<CR>

" Encoding menu
set wildmenu
set wcm=<Tab>
menu Encoding.koi8-r :e ++enc=koi8-r<CR>
menu Encoding.utf-8 :e ++enc=utf8 <CR>
menu Encoding.windows-1251 :e ++enc=cp1251<CR>
menu Encoding.cp866 :e ++enc=cp866<CR>
noremap <silent> <leader>e :emenu Encoding.<TAB>

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

"let &errorformat="%Dgmake[%*\\d]:\ Leaving\ directory\ `%f'," . &errorformat
let &errorformat="%f:%l: %t%*[^:]:%m," . &errorformat
